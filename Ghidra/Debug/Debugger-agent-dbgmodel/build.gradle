apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
apply from: "$rootProject.projectDir/gradle/jacocoProject.gradle"
apply from: "$rootProject.projectDir/gradle/javaTestProject.gradle"
apply from: "$rootProject.projectDir/gradle/nativeProject.gradle"
apply from: "$rootProject.projectDir/gradle/distributableGhidraModule.gradle"

apply plugin: 'eclipse'
eclipse.project.name = 'Debug Debugger-agent-dbgmodel'

dependencies {
	compile project(":Debugger-agent-dbgeng")

	testCompile project(path: ":Debugger-agent-dbgeng", configuration: 'testArtifacts')
}

def boolean filterJar(File jarfile) {
	if (jarfile.name.contains("gradle-api")) {
		return false
	} else if (jarfile.name.contains("groovy-all")) {
		return false
	} else if (jarfile.name.contains("gradle-installation-beacon")) {
		return false
	}
	return true
}

jar {
	manifest {
		attributes['Main-Class'] = 'agent.dbgmodel.gadp.DbgModelGadpServer'
	}
}

task configureNodepJar {
	doLast {
		configurations.runtime.files.forEach {
			if (filterJar(it)) {
				nodepJar.from(zipTree(it))
			}
		}
	}
}

task nodepJar(type: Jar) {
	inputs.file(file(jar.archivePath))
	dependsOn(configureNodepJar)
	dependsOn(jar)

	appendix = 'nodep'
	manifest {
		attributes['Main-Class'] = 'agent.dbgmodel.gadp.DbgModelGadpServer'
	}

	from(zipTree(jar.archivePath))
}

test {
	jvmArgs('-Xrs') // TODO: Is this needed, or left over from trial-and-error
	if ("win64".equals(getCurrentPlatformName())) {
		dependsOn(":Framework-Debugging:testSpecimenWin64")
	}
}
